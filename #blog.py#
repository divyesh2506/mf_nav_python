import os
import webapp2
import jinja2

from google.appengine.ext import db

template_dir= os.path.join(os.path.dirname(__file__), 'templates')
jinja_env=jinja2.Environment(loader=jinja2.FileSystemLoader(template_dir),
                             autoescape=True)


class Handler(webapp2.RequestHandler):
    def write(self, *a, **kw):
        self.response.write(*a, **kw)
    
    def render_str(self,template, **params):
        t=jinja_env.get_template(template)
        return t.render(params)
        
    def render(self,template,**kw):
        self.write(self.render_str(template, **kw))

class Blogs(db.Model):
	title=db.StringProperty(required=True)
	content=db.TextProperty(required=True)
	created=db.DateTimeProperty(auto_now_add=True)
   
	
class BlogMainPage(Handler):
    def render_front(self,title="",art="",error=""):
        #arts=db.GqlQuery("SELECT * FROM Art ORDER BY created DESC")
        self.render("blogfront.html")#,title=title,art=art,error=error,arts=arts)
    
    def get(self):
        self.render_front()
    	#self.write("asciichan!!")
    	#items=self.request.get_all("food")
        
    
    def post(self):
        title=self.request.get("title")
    	art=self.request.get("art")
    	
    	if title and art :
    	   a=Art(title=title,art=art)
    	   a.put()
    	   self.redirect('/')
    	else:
    	   error="we need both a title and an artwork"
    	   self.render_front(title,art,error=error)


class BlogNewPost(Handler):
    def render_front(self,title="",error=""):
        self.render("newblogfront.html",title=title,error=error)#,title=title,art=art,error=error,arts=arts)
   
    def get(self):
        self.render("newblogfront.html")
	
    def post(self):
        title=self.request.get("title")
    	content=self.request.get("content")
    	
    	if title and content :
    	   a=Blogs(title=title,content=content)
    	   key=a.put()
    	   self.redirect('/blog/?q='+str(key.id()))
    	else:
    	   error="we need both a title and the content"
    	   self.render_front(title,error=error)

class GetBlogWithID(Handler):
    def get(self):
        blog_id=self.request.get('q')
        
        
        
application = webapp2.WSGIApplication([
    ('/blog', BlogMainPage),
    ('/blog/newpost', BlogNewPost),
    (r'/blog/(\d+)',GetBlogWithID)
], debug=True)